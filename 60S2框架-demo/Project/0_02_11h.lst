C51 COMPILER V9.56.0.0   0_02_11H                                                          04/30/2018 05:07:21 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE 0_02_11H
OBJECT MODULE PLACED IN ..\HexCode\0_02_11h.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\Main\0_02_11h.C OMF2 OPTIMIZE(8,SPEED) PRINT(.\0_02_11h.lst) TABS(2) 
                    -OBJECT(..\HexCode\0_02_11h.obj)

line level    source

   1          /*------------------------------------------------------------------*-
   2          
   3             *** THIS IS A *HYBRID* SCHEDULER FOR STANDARD 8051 / 8052 ***
   4          
   5          -*------------------------------------------------------------------*/
   6          
   7          #include "0_02_11h.h"   
   8          #include "..\main\ext_reg.h"
   9          
  10          // ------ Public variable declarations -----------------------------
  11          
  12          // The array of tasks (see Sch51.C)
  13          extern sTaskH hSCH_tasks_G[hSCH_MAX_TASKS];
  14          
  15          // Used to display the error code
  16          // See Main.H for details of error codes
  17          // See Port.H for details of the error port
  18          //extern uchar xdata Error_code_G;
  19          
  20          /*------------------------------------------------------------------*-
  21            hSCH_Init_T0()
  22           -*------------------------------------------------------------------*/
  23          void hSCH_Init_T0(void)                //定时器 开中断
  24          {
  25   1      /*   uchar i;
  26   1      
  27   1         for (i = 0; i < hSCH_MAX_TASKS; i++) 
  28   1            {
  29   1              hSCH_Delete_Task(i);
  30   1            }
  31   1      */
  32   1      
  33   1         TMOD &= 0xF0; // Clear all T0 bits (T1 left unchanged)
  34   1         TMOD |= 0x01; // Set required T0 bits (T1 left unchanged) 
  35   1      
  36   1         TH0    = T_02ms_H;  // load timer 0 high byte 
  37   1         TL0    = T_02ms_L;  // load timer 0 low byte 
  38   1         
  39   1         ET0   = 1;  // Timer 0 interrupt is enabled
  40   1         TR0   = 1;  // Start Timer 0
  41   1      
  42   1      }
  43          
  44          void hSCH_Start(void) 
  45          {
  46   1         EA = 1; 
  47   1      }
  48          
  49          
  50          void hSCH_Update(void) interrupt INTERRUPT_Timer_0_Overflow           //任务调度更新中断服务程序
  51          {
  52   1         uchar Index; 
  53   1      
  54   1         TH0    = T_02ms_H;  // load timer 0 high byte 
C51 COMPILER V9.56.0.0   0_02_11H                                                          04/30/2018 05:07:21 PAGE 2   

  55   1         TL0    = T_02ms_L;  // load timer 0 low byte   
  56   1      
  57   1         for (Index = 0; Index < hSCH_MAX_TASKS; Index++)
  58   1            {
  59   2            // Check if there is a task at this location
  60   2            if (hSCH_tasks_G[Index].pTask)        //
  61   2               {
  62   3               if (hSCH_tasks_G[Index].Delay == 0)    //
  63   3                  {
  64   4                  // The task is due to run
  65   4                  // 
  66   4                  if (hSCH_tasks_G[Index].Co_op)       
  67   4                     {
  68   5                     // If it is a co-operative task, increment the RunMe flag
  69   5                     hSCH_tasks_G[Index].RunMe += 1;    //
  70   5                     }
  71   4                  else
  72   4                     {
  73   5                     // If it is a pre-emptive task, run it IMMEDIATELY
  74   5                     (*hSCH_tasks_G[Index].pTask)();  // Run the task      //
  75   5      
  76   5                     hSCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag //
  77   5      
  78   5                     // Periodic tasks will be run again (see below)
  79   5                     // - if this is a 'one shot' task, remove it from the array
  80   5                     if (hSCH_tasks_G[Index].Period == 0)    //
  81   5                        {
  82   6                        hSCH_tasks_G[Index].pTask  = 0;     //
  83   6                        }
  84   5                      }
  85   4      
  86   4                    if (hSCH_tasks_G[Index].Period)        //
  87   4                      {
  88   5                         // Schedule periodic tasks to run again
  89   5                         hSCH_tasks_G[Index].Delay = hSCH_tasks_G[Index].Period;    //
  90   5                      }
  91   4                    }
  92   3                   else
  93   3                      {
  94   4                      // Not yet ready to run: just decrement the delay 
  95   4                      hSCH_tasks_G[Index].Delay -= 1;                 //
  96   4                      }
  97   3                  }         
  98   2            }
  99   1      }   
 100                           
 101          /*------------------------------------------------------------------*-
 102            ---- END OF FILE -------------------------------------------------
 103          -*------------------------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    267    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
C51 COMPILER V9.56.0.0   0_02_11H                                                          04/30/2018 05:07:21 PAGE 3   

   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
