C51 COMPILER V9.56.0.0   SERIALS2                                                          04/30/2018 05:07:21 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE SERIALS2
OBJECT MODULE PLACED IN ..\HexCode\serialS2.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\Comm\serialS2.c OMF2 OPTIMIZE(8,SPEED) PRINT(.\serialS2.lst) TABS(2) 
                    -OBJECT(..\HexCode\serialS2.obj)

line level    source

   1          #include "serialS2.h"       
   2          #include "..\main\port.h"
   3          #include "..\public\public.h"
   4          #include <intrins.h>
   5          
   6          #define  S2RI   0x01       // S2CON.0
   7          #define  S2TI   0x02       // S2CON.1          
   8          
   9          //-----------------------串口2-------------------------//   
  10          uchar   xdata    S2_Tran_Buff[TRANBUFFLEN][N_S2_SEND]; 
  11          uchar   xdata    S2_Recv_Buff[RECVBUFFLEN][N_S2_RECV];
  12          bit     bdata    S2_b_SendPrce;        // 发送标志                      
  13          uchar   idata    S2_SendPtr;           // 发送指针    
  14          uchar   idata    S2_SendPrcePtr;       // 发送处理指针 
  15          uchar   idata    S2_TranPtr;           // 传送指针   
  16          uchar   idata    S2_TranLen;           // 传送长度   
  17          uchar   idata    S2_RecvPtr;       // 接收指针       
  18          uchar   idata    S2_RecvPrcePtr;       // 接收处理指针
  19          uchar   idata    S2_RecvState;       // 接收状态   
  20          uchar   idata    S2_RecvCount;         // 接收计数
  21          uchar   idata    S2_RecvLen;           // 接收长度
  22          uchar   idata    S2_RecvSum;           // 接收校验和
  23          uchar   idata    S2_Recv_Idle_Count;   // 接收空闲计数   
  24          
  25          ////////////////////////////////////////////////////////
  26          
  27          void SerialS2_Init()
  28          {               
  29   1        AUXR &= 0xF7;   //
  30   1        S2CON = 0x50;   //
  31   1        AUXR |= 0x04;   //
  32   1        BRT = 0xDC;   //
  33   1        AUXR |= 0x10;   //
  34   1      }
  35          
  36          
  37          void SerialS2_Update()
  38          {
  39   1      // 发送
  40   1        if(S2CON&S2TI)
  41   1        {
  42   2          S2CON &= ~S2TI;
  43   2          if(S2_TranPtr < S2_TranLen)
  44   2          {    
  45   3              NOP();
  46   3            S2BUF = S2_Tran_Buff[S2_TranPtr][S2_SendPrcePtr];   
  47   3            S2_TranPtr++;  
  48   3          } 
  49   2          else
  50   2          {          
  51   3            S2_b_SendPrce = 0;             
  52   3            if((++S2_SendPrcePtr)>=N_S2_SEND)
  53   3                  {  S2_SendPrcePtr = 0;  }  
  54   3            NOP();     
C51 COMPILER V9.56.0.0   SERIALS2                                                          04/30/2018 05:07:21 PAGE 2   

  55   3          }
  56   2        }    
  57   1      
  58   1       // 接收
  59   1        if((S2_Recv_Idle_Count++)>20)
  60   1        {
  61   2          S2_Recv_Idle_Count = 0;
  62   2          S2_RecvState = 0 ;
  63   2        }
  64   1        
  65   1        if(S2CON&S2RI)      //
  66   1        {                  
  67   2          S2CON &= ~S2RI;       
  68   2          S2_Recv_Idle_Count = RECID1;     
  69   2                   
  70   2          switch(S2_RecvState)        
  71   2          {
  72   3            case RECID1:
  73   3                      if((S2BUF == 0xaa)||(S2BUF == 0xbb))
  74   3              {                   
  75   4                S2_RecvState = RECID2;                    
  76   4              }                 
  77   3              break;             
  78   3      
  79   3                  case RECID2:       
  80   3              if(S2BUF == 0x83)
  81   3              {              
  82   4                S2_RecvState = RECLEN;     
  83   4              }
  84   3              else
  85   3              {
  86   4                S2_RecvState = RECID1;
  87   4              }
  88   3                break;
  89   3      
  90   3            case RECLEN:
  91   3              S2_RecvLen = S2BUF; 
  92   3                      if((S2_RecvLen>=RECVBUFFLEN)||(S2_RecvLen<2))
  93   3                      {
  94   4                        S2_RecvState = RECID1;  
  95   4                      }
  96   3              else
  97   3              {
  98   4                        S2_RecvSum = S2_RecvLen;    
  99   4                  S2_RecvCount = 0;
 100   4                        S2_RecvState = RECBUF;   
 101   4              }
 102   3              break;    
 103   3      
 104   3            case RECBUF:
 105   3                      S2_Recv_Buff[S2_RecvCount][S2_RecvPtr] = S2BUF; 
 106   3                      S2_RecvSum = S2_RecvSum^S2BUF;   
 107   3                      S2_RecvCount++;
 108   3                      if((S2_RecvCount+1)>=S2_RecvLen)
 109   3                      {
 110   4                        S2_RecvState = RECSUM;      
 111   4                      }   
 112   3              break;
 113   3             
 114   3            case RECSUM:
 115   3                     if(S2_RecvSum == S2BUF)
 116   3                      {              
C51 COMPILER V9.56.0.0   SERIALS2                                                          04/30/2018 05:07:21 PAGE 3   

 117   4                         if((++S2_RecvPtr)>=N_S2_RECV)
 118   4                           { S2_RecvPtr = 0; }    
 119   4                      } 
 120   3                      S2_RecvState = RECID1;      
 121   3              break;
 122   3                  
 123   3            default:
 124   3              S2_RecvState = 0;
 125   3              break;
 126   3          }
 127   2        } 
 128   1      }
 129          
 130          
 131          /*------------------------------------------------------------------*/
 132          void SerialS2_Send()
 133          {             
 134   1        uchar i,len; 
 135   1        
 136   1        if(S2_b_SendPrce) return;  // 不能更改,省略     
 137   1        
 138   1        if(S2_GetSendCount()==0) return;
 139   1        
 140   1        len = S2_Tran_Buff[2][S2_SendPrcePtr]; 
 141   1        if((len>=TRANBUFFLEN)||(len<2))
 142   1        {
 143   2          if((++S2_SendPrcePtr)>=N_S2_SEND)
 144   2          { S2_SendPrcePtr = 0; }
 145   2          return;
 146   2        } 
 147   1        
 148   1        S2_Tran_Buff[0][S2_SendPrcePtr] = 0xbb;      
 149   1        S2_Tran_Buff[1][S2_SendPrcePtr] = 0x83;
 150   1        S2_Tran_Buff[2][S2_SendPrcePtr] = len+1; 
 151   1        S2_Tran_Buff[len+3][S2_SendPrcePtr] = len+1;  //从长度字开始校验
 152   1        for(i=0;i<len;i++)
 153   1         {
 154   2            S2_Tran_Buff[len+3][S2_SendPrcePtr] ^= S2_Tran_Buff[i+3][S2_SendPrcePtr];
 155   2         }
 156   1        S2_TranPtr = 0;
 157   1        S2_TranLen = len+4;  // 0xbb,0x83,len,bcc (4Bytes)
 158   1        S2_b_SendPrce = 1;  
 159   1        
 160   1        S2CON |= S2TI; //重要     
 161   1      }
 162          
 163          //（1）、发送缓冲区中待处理信息信息数
 164          uchar S2_GetSendCount()
 165          {
 166   1         if(S2_SendPtr >= S2_SendPrcePtr)
 167   1          {  
 168   2           return (S2_SendPtr - S2_SendPrcePtr); 
 169   2        }
 170   1         else
 171   1          { 
 172   2          return (N_S2_SEND + S2_SendPtr - S2_SendPrcePtr + 1); 
 173   2        }
 174   1      }
 175          
 176          //（2）、接收缓冲区中待处理信息信息数
 177          uchar S2_GetRecvCount()
 178          { 
C51 COMPILER V9.56.0.0   SERIALS2                                                          04/30/2018 05:07:21 PAGE 4   

 179   1         if(S2_RecvPtr >= S2_RecvPrcePtr)
 180   1          { 
 181   2          return (S2_RecvPtr - S2_RecvPrcePtr);  
 182   2        }
 183   1         else
 184   1          { 
 185   2          return (N_S2_RECV + S2_RecvPtr - S2_RecvPrcePtr + 1); 
 186   2        }
 187   1      }   
 188            
 189          /*------------------------------------------------------------------*-
 190            ---- END OF FILE -------------------------------------------------
 191          -*------------------------------------------------------------------*/ 
 192          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    559    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    240    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     11    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
