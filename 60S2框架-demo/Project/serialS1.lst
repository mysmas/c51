C51 COMPILER V9.56.0.0   SERIALS1                                                          04/30/2018 05:07:21 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE SERIALS1
OBJECT MODULE PLACED IN ..\HexCode\serialS1.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\Comm\serialS1.c OMF2 OPTIMIZE(8,SPEED) PRINT(.\serialS1.lst) TABS(2) 
                    -OBJECT(..\HexCode\serialS1.obj)

line level    source

   1          #include "serialS1.h"        
   2          #include "..\public\public.h"
   3          #include <intrins.h>         
   4          
   5          //-----------------------串口1-------------------------//   
   6          uchar   xdata    S1_Tran_Buff[TRANBUFFLEN][N_S1_SEND]; 
   7          uchar   xdata    S1_Recv_Buff[RECVBUFFLEN][N_S1_RECV];
   8          bit     bdata    S1_b_SendPrce;        // 发送标志                      
   9          uchar   idata    S1_SendPtr;           // 发送指针    
  10          uchar   idata    S1_SendPrcePtr;       // 发送处理指针 
  11          uchar   idata    S1_TranPtr;           // 传送指针   
  12          uchar   idata    S1_TranLen;           // 传送长度   
  13          uchar   idata    S1_RecvPtr;       // 接收指针       
  14          uchar   idata    S1_RecvPrcePtr;       // 接收处理指针
  15          uchar   idata    S1_RecvState;       // 接收状态   
  16          uchar   idata    S1_RecvCount;         // 接收计数
  17          uchar   idata    S1_RecvLen;           // 接收长度
  18          uchar   idata    S1_RecvSum;           // 接收校验和
  19          uchar   idata    S1_Recv_Idle_Count;   // 接收空闲计数   
  20          
  21          ////////////////////////////////////////////////////////
  22          
  23          void SerialS1_Init()
  24          {               
  25   1        //2400bps@11.0592MHz                  
  26   1        SCON = 0x50;    //8位数据,可变波特率
  27   1      //  AUXR |= 0x40;   //定时器1时钟为Fosc,即1T
  28   1      //  AUXR &= 0xFE;   //串口1选择定时器1为波特率发生器
  29   1        TMOD |= 0x20;   //
  30   1        TL1 = 0xFD;       //TL1 = 0x80;       //设定定时初值
  31   1        TH1 = 0xFD;       //TH1 = 0xFB;       //设定定时初值     
  32   1        TR1 = 1;        //启动定时器1        
  33   1        ES = 0;       //禁止串口中断，使用查询方式
  34   1      }
  35          
  36          
  37          void SerialS1_Update()
  38          {
  39   1      // 发送
  40   1        if(TI == 1)
  41   1        {
  42   2          TI = 0;
  43   2          if(S1_TranPtr < S1_TranLen)
  44   2          { 
  45   3            SBUF = S1_Tran_Buff[S1_TranPtr][S1_SendPrcePtr];   
  46   3            S1_TranPtr++;  
  47   3          } 
  48   2          else
  49   2          {  
  50   3            NOP();
  51   3            S1_b_SendPrce = 0;             
  52   3            if((++S1_SendPrcePtr)>=N_S1_SEND)
  53   3                  {  S1_SendPrcePtr = 0;  }  
  54   3            NOP();     
C51 COMPILER V9.56.0.0   SERIALS1                                                          04/30/2018 05:07:21 PAGE 2   

  55   3          }
  56   2        }    
  57   1      
  58   1       // 接收
  59   1        if((S1_Recv_Idle_Count++)>20)
  60   1        {
  61   2          S1_Recv_Idle_Count = 0;
  62   2          S1_RecvState = 0 ;
  63   2        }
  64   1        
  65   1        if(RI == 1)
  66   1        {
  67   2          RI = 0;        
  68   2          S1_Recv_Idle_Count = RECID1;     
  69   2          
  70   2          switch(S1_RecvState)        
  71   2          {
  72   3            case RECID1:
  73   3                      if((SBUF == 0xaa)||(SBUF == 0xbb))
  74   3              {                   
  75   4                S1_RecvState = RECID2;    
  76   4              }                 
  77   3              break;             
  78   3      
  79   3                  case RECID2:       
  80   3              if(SBUF == 0x83)
  81   3              {              
  82   4                S1_RecvState = RECLEN;     
  83   4              }
  84   3              else
  85   3              {
  86   4                S1_RecvState = RECID1;
  87   4              }
  88   3                break;
  89   3      
  90   3            case RECLEN:
  91   3              S1_RecvLen = SBUF;  
  92   3                      if((S1_RecvLen>=RECVBUFFLEN)||(S1_RecvLen<2))
  93   3                      {
  94   4                        S1_RecvState = RECID1;  
  95   4                      }
  96   3              else
  97   3              {
  98   4                        S1_RecvSum = S1_RecvLen;    
  99   4                  S1_RecvCount = 0;
 100   4                        S1_RecvState = RECBUF;   
 101   4              }
 102   3              break;    
 103   3      
 104   3            case RECBUF:
 105   3                      S1_Recv_Buff[S1_RecvCount][S1_RecvPtr] = SBUF; 
 106   3                      S1_RecvSum = S1_RecvSum^SBUF;   
 107   3                      S1_RecvCount++;
 108   3                      if((S1_RecvCount+1)>=S1_RecvLen)
 109   3                      {
 110   4                        S1_RecvState = RECSUM;      
 111   4                      }   
 112   3              break;
 113   3             
 114   3            case RECSUM:
 115   3                     if(S1_RecvSum == SBUF)
 116   3                      {              
C51 COMPILER V9.56.0.0   SERIALS1                                                          04/30/2018 05:07:21 PAGE 3   

 117   4                         if((++S1_RecvPtr)>=N_S1_RECV)
 118   4                           { S1_RecvPtr = 0; }    
 119   4                      } 
 120   3                      S1_RecvState = RECID1;  
 121   3                      
 122   3              break;
 123   3                  
 124   3            default:
 125   3              S1_RecvState = 0;
 126   3              break;
 127   3          }
 128   2        } 
 129   1      }
 130          
 131          
 132          /*------------------------------------------------------------------*/
 133          void SerialS1_Send()
 134          {             
 135   1        uchar i,len; 
 136   1        
 137   1        if(S1_b_SendPrce) return;  // 不能更改,省略     
 138   1        
 139   1        if(S1_GetSendCount()==0) return;
 140   1        
 141   1        len = S1_Tran_Buff[2][S1_SendPrcePtr]; 
 142   1        if((len>=TRANBUFFLEN)||(len<2))
 143   1        {
 144   2          if((++S1_SendPrcePtr)>=N_S1_SEND)
 145   2          { S1_SendPrcePtr = 0; }
 146   2          return;
 147   2        } 
 148   1        
 149   1        S1_Tran_Buff[0][S1_SendPrcePtr] = 0xbb;      
 150   1        S1_Tran_Buff[1][S1_SendPrcePtr] = 0x83;
 151   1        S1_Tran_Buff[2][S1_SendPrcePtr] = len+1; 
 152   1        S1_Tran_Buff[len+3][S1_SendPrcePtr] = len+1;  //从长度字开始校验
 153   1        for(i=0;i<len;i++)
 154   1         {
 155   2            S1_Tran_Buff[len+3][S1_SendPrcePtr] ^= S1_Tran_Buff[i+3][S1_SendPrcePtr];
 156   2         }
 157   1        S1_TranPtr = 0;
 158   1        S1_TranLen = len+4;  // 0xbb,0x83,len,bcc (4Bytes)
 159   1        S1_b_SendPrce = 1;  
 160   1        
 161   1        TI = 1; //重要    
 162   1      }
 163          
 164          //（1）、发送缓冲区中待处理信息信息数
 165          uchar S1_GetSendCount()
 166          {
 167   1         if(S1_SendPtr >= S1_SendPrcePtr)
 168   1          {  
 169   2           return (S1_SendPtr - S1_SendPrcePtr); 
 170   2        }
 171   1         else
 172   1          { 
 173   2          return (N_S1_SEND + S1_SendPtr - S1_SendPrcePtr + 1); 
 174   2        }
 175   1      }
 176          
 177          //（2）、接收缓冲区中待处理信息信息数
 178          uchar S1_GetRecvCount()
C51 COMPILER V9.56.0.0   SERIALS1                                                          04/30/2018 05:07:21 PAGE 4   

 179          { 
 180   1         if(S1_RecvPtr >= S1_RecvPrcePtr)
 181   1          { 
 182   2          return (S1_RecvPtr - S1_RecvPrcePtr);  
 183   2        }
 184   1         else
 185   1          { 
 186   2          return (N_S1_RECV + S1_RecvPtr - S1_RecvPrcePtr + 1); 
 187   2        }
 188   1      }     
 189          
 190          /*------------------------------------------------------------------*-
 191            ---- END OF FILE -------------------------------------------------
 192          -*------------------------------------------------------------------*/
 193          
 194          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    553    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    240    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     11    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
